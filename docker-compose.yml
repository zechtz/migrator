services:
  migrator:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: oracle-postgres-migrator
    environment:
      # Oracle Database Configuration
      - ORACLE_USER=${ORACLE_USER}
      - ORACLE_PASSWORD=${ORACLE_PASSWORD}
      - ORACLE_HOST=${ORACLE_HOST}
      - ORACLE_PORT=${ORACLE_PORT:-1521}
      - ORACLE_SID=${ORACLE_SID}

      # PostgreSQL Database Configuration
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB}

      # Migration Configuration
      - BATCH_SIZE=${BATCH_SIZE:-1000}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - MAX_RETRIES=${MAX_RETRIES:-3}
      - CONCURRENT_BATCHES=${CONCURRENT_BATCHES:-4}

      # Node.js Configuration
      - NODE_ENV=${NODE_ENV:-production}
    volumes:
      # Mount logs directory to persist logs
      - ./logs:/app/logs
      # Mount checkpoint file to persist migration state
      - ./migration_checkpoint.json:/app/migration_checkpoint.json
    networks:
      - migration-network
    restart: unless-stopped
    depends_on:
      - postgres
    # Uncomment if you want to run interactively
    # stdin_open: true
    # tty: true

  # Optional: Local PostgreSQL for testing
  postgres:
    image: postgres:15-alpine
    container_name: migration-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-rita_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-rita_password}
      POSTGRES_DB: ${POSTGRES_DB:-rita}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d
    networks:
      - migration-network
    restart: unless-stopped

  # Optional: Adminer for database management
  adminer:
    image: adminer:latest
    container_name: migration-adminer
    ports:
      - "8080:8080"
    networks:
      - migration-network
    restart: unless-stopped
    depends_on:
      - postgres

networks:
  migration-network:
    driver: bridge

volumes:
  postgres_data:
